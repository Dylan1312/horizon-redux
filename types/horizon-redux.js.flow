// @flow

import type { Action, ActionType, Dispatch, GetState } from './redux'
import type { HorizonInstance, HorizonObservable } from './horizon'

export type ActionTakerPattern = ActionType|Array<ActionType>|(a:Action)=>boolean
export type ActionTakerObservableQuery = (hz:HorizonInstance, action:Action, getState:GetState)=>HorizonObservable
export type ActionTakerSuccessHandler = (result:any, action:Action, dispatch:Dispatch)=>void
export type ActionTakerErrorHandler = (err:any, action:Action, dispatch:Dispatch)=>void
export type ActionTakerType = string

export type ActionTaker = {
  pattern: ActionTakerPattern,
  observableQuery: ActionTakerObservableQuery,
  successHandler?: ActionTakerSuccessHandler,
  errorHandler?: ActionTakerErrorHandler,
  subscribers: [],
  type: ActionTakerType
}

export type ActionTakers = Array<ActionTaker>

export type ActionTakerManager = {
  remove: ()=>void
}

export type ActionTakerAdder = (
  pattern: ActionTakerPattern,
  observableQuery: ActionTakerObservableQuery,
  successHandler?: ActionTakerSuccessHandler,
  errorHandler?: ActionTakerErrorHandler,
  type?: ActionTakerType
)=>ActionTakerManager
